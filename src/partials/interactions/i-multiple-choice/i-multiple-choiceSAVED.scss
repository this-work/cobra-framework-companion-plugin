////
///
/// i-multiple-choice
///
/// @group Interactions
///
////

$i-multiple-choice-breakpoint-desktop: 's' !default;
$i-multiple-choice-actions-margin-top: spacing('44') !default;
$i-multiple-choice-actions-spacing-map--without-images: ('default': '44', 'm': 50px) !default;
$i-multiple-choice-breakpoint-10-coloumns--type-stacked: 'l';
$i-multiple-choice-choice-spacing-map--without-images: ('default': '20', 's': '27') !default;
$i-multiple-choice-choice-spacing--mobile: spacing('10') !default;
$i-multiple-choice-choice-spacing--desktop: spacing('16') !default;
$i-multiple-choice-gaps--desktop: spacing('10') !default;
$i-multiple-choice-gaps--mobile: spacing('6') !default;
$i-multiple-choice-margin: spacing('27') !default;
$i-multiple-choice-spacing-map--type-default: ('s': '44', 'l': '71', 'xxxl': '115') !default;

@mixin add-page-spacing (       // ORIGINAL in m-interactions.scss
    $breakpoint,
    $properties: margin-left margin-right,
    $offsetVisbilityDirection: 'above',
    $direction: 'positive',
    $site-area-config: $site-area-columns
) {

    $largest-breakpoint: 0px;
    $largest-breakpoint-content-width: 0px;

    @each $page-breakpoint, $settings in $site-area-columns {

        @if (   $offsetVisbilityDirection == 'below' and strip-unit(breakpoint($page-breakpoint)) < strip-unit(breakpoint($breakpoint))
             or $offsetVisbilityDirection == 'above' and strip-unit(breakpoint($page-breakpoint)) >= strip-unit(breakpoint($breakpoint)) ) {

            @if ($offsetVisbilityDirection == 'above' and $largest-breakpoint < breakpoint($page-breakpoint)) {
                $largest-breakpoint: breakpoint($page-breakpoint);
                $largest-breakpoint-content-width: map-get($settings, 'content');
            }

            @include possible-mediaquery($page-breakpoint) {

                $minPageWidth: map-get($settings, 'page');

                @if (str-index(#{$minPageWidth}, 'minmax')) {


                    @each $property in $properties {

                        $minPageWidth: str-slice(#{map-get($settings, 'page')}, 8, (str-index(#{map-get($settings, 'page')}, "px,") + 1));

                        @if ($direction == 'positive') {
                            #{$property}: #{'calc((100vw - #{map-get($settings, 'content')}) / -2 / 2)'}; // for IE
                            #{$property}: #{'calc(max(#{$minPageWidth}, ((100vw - #{map-get($settings, 'content')}) / 2 / 2)))'};
                        } @else {
                            #{$property}: #{'calc((100vw - #{map-get($settings, 'content')}) / 2 / 2)'}; // for IE
                            #{$property}: #{'calc(max(#{$minPageWidth}, ((100vw - #{map-get($settings, 'content')}) / 2 / 2)) * -1)'};
                        }
                    }

                } @else {

                    @each $property in $properties {

                        @if ($direction == 'positive') {

                            #{$property}: #{$minPageWidth};

                        } @else {

                            $minPageWidth: number(str-replace(#{$minPageWidth}, 'px', ''));
                            #{$property}: #{$minPageWidth * -1 + 'px'};

                        }

                    }

                }

            }

        } @else {
            @if ($offsetVisbilityDirection == 'below') {
                @include possible-mediaquery($page-breakpoint) {

                    @each $property in $properties {
                        #{$property}: 0;
                    }

                }
            }
        }
    }

    @if ( $offsetVisbilityDirection == 'above') {

        @include above(2 * $max-page-width - $largest-breakpoint-content-width) {

            @each $property in $properties {
                #{$property}:  calc(($max-page-width - $largest-breakpoint-content-width) / 2);
            }

        }
    }
}


@mixin grid-context-extended (      // aus _css-grid.scss
    $grid-name: $default-grid,
    $columns: null,
) {

    $calculate-column-gutter: $columns != null;
    $standard-coloumns-count: _get-grid-data('columns', $grid-name);

    @if ($columns == null) {
        $columns: _get-grid-data('columns', $grid-name);
    }

    $column-width: _get-grid-data('column-width', $grid-name);

    $column-gutter: _get-grid-data('column-gutter', $grid-name);

    @if ($calculate-column-gutter) {
        $column-gutter: $standard-coloumns-count / $columns * $column-gutter;
    }

    $rows: _get-grid-data('rows', $grid-name);

    $rows-height: _get-grid-data('rows-height', $grid-name);

    $row-gutter: _get-grid-data('row-gutter', $grid-name);

    $grid-flow: _get-grid-data('grid-flow', $grid-name);

    $column-first: _get-grid-data('column-first', $grid-name);

    @include _grid-context($columns, $column-width, $column-gutter, $rows, $rows-height, $row-gutter, $grid-flow, $column-first);

}


@mixin i-dragg-drop-add-grid-gutter-spacing (       // ORIGINAL in i-dragg-drop.scss
    $properties,
    $config: $grid-config,
    $grid: $default-grid
) {

    @if (length($properties) == 0) {
        @error 'No properties given.';
    }

    $column-gutter: 0px;

    @if (map-has-key(map-get($config, $grid), 'column-gutter')) {
        $column-gutter: map-get(map-get($config, $grid), 'column-gutter');
    } @else {
        @error 'No column-gutter in grid "#{$grid}" with grid-config "#{$config}" found.';
    }

    @each $property in $properties {

        #{$property}: #{$column-gutter};

    }

}

.i-multiple-choice {
    // #region [Block]
    $module: &;
    // #endregion

    // #region [Element]

    &--without-images {

        #{$module}__choice {
            @include grid-cell-size(12);
            @include responsive-spacing($properties: margin-top, $spacing-map: $i-multiple-choice-choice-spacing-map--without-images);

            &:first-of-type {
                margin-top: 0;
            }

            .c-input-checkbox__text {
                opacity: 1 !important;
            }
        }

        #{$module}__actions {
            text-align: center;
            @include responsive-spacing($properties: margin-top, $spacing-map: $i-multiple-choice-actions-spacing-map--without-images);
        }

    }

    &--with-images {

        #{$module}__wrapper {
            display: flex;
            justify-content: flex-start;
            flex-wrap: wrap;
        }

        #{$module}__choice-wrapper {
            position: relative;
            flex-shrink: 0;
            flex-grow: 0;
            width: grid-column-width-percentage(6);
            @include i-dragg-drop-add-grid-gutter-spacing(margin-right);

            &:nth-child(2n) {
                margin-right: 0;
            }
        }

        &#{$module} {
            @include add-page-spacing($i-multiple-choice-breakpoint-desktop, margin-top margin-bottom, $offsetVisbilityDirection: 'below');
        }

        #{$module}__actions {
            text-align: center;
            margin-top: $i-multiple-choice-actions-margin-top;
        }

        #{$module}__choice {
            z-index: zindex(400);
            position: absolute;
            top: $i-multiple-choice-choice-spacing--mobile;
            right: $i-multiple-choice-choice-spacing--mobile;

            @include above($i-multiple-choice-breakpoint-desktop) {
                top: $i-multiple-choice-choice-spacing--desktop;
                right: $i-multiple-choice-choice-spacing--desktop;
            }
        }

        #{$module}__label {
            z-index: zindex(300);
            margin-top: spacing('6');
            @include responsive-font('choice-image-label');

            > *:not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) {
                @include responsive-font('choice-image-label');
            }
        }

        #{$module}__image {
            transition: transition(opacity);
            position: relative;
            overflow: hidden;
            border-radius: 5px;

            &::after {
                content: '';
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                pointer-events: none;
                transition: transition(opacity);
                background: rgba(0, 0, 0, 0.25);
                z-index: zindex(100);
                opacity: 0;
            }

            &:focus {
                @include color-theme('focus');
            }

            &--selected {

                &::after {
                    opacity: 1;
                }
            }
        }
    }
    // #endregion

    // #region [Modifier]
    &--selected {

        &#{$module}__image::after {
            opacity: 1;
        }
    }

    &--readonly {

        #{$module}__choice-wrapper {
            pointer-events: none;
        }
    }

    @at-root.m-interaction {

        &--type-stacked {

            #{$module}--without-images {

                #{$module}__actions {

                    @include above($i-multiple-choice-breakpoint-desktop) {
                        text-align: left;
                    }
                }
            }

            #{$module}--with-images {

                &[class*="spacing-padding-top"] {

                    @include below($i-multiple-choice-breakpoint-desktop) {
                        padding-top: 0;
                    }
                }

                &[class*="spacing-padding-bottom"] {

                    @include below($i-multiple-choice-breakpoint-desktop) {
                        padding-bottom: 0;
                    }
                }
            }

            #{$module}[class*="--image-count"] {

                #{$module}__wrapper {

                    @include above($i-multiple-choice-breakpoint-desktop) {
                        justify-content: center;
                    }
                }

                &#{$module}--image-count-2 {

                    #{$module}__choice-wrapper {

                        @include above($i-multiple-choice-breakpoint-desktop) {

                            width: grid-column-width-percentage(5);
                            @include i-dragg-drop-add-grid-gutter-spacing(margin-right);

                            &:last-of-type {
                                margin-right: 0;
                            }
                        }
                    }
                }

                &#{$module}--image-count-3 {

                    #{$module}__choice-wrapper {

                        @include above($i-multiple-choice-breakpoint-desktop) {

                            width: grid-column-width-percentage(4);
                            @include i-dragg-drop-add-grid-gutter-spacing(margin-right);

                            &:last-of-type {
                                margin-right: 0;
                            }
                        }
                    }
                }

                &#{$module}--image-count-4 {

                    @include above($i-multiple-choice-breakpoint-desktop) {

                        #{$module}__choice-wrapper {
                            width: grid-column-width-percentage(3);
                            @include i-dragg-drop-add-grid-gutter-spacing(margin-right);

                            &:last-of-type {
                                margin-right: 0;
                            }
                        }
                    }
                }
            }

        }

        &--type-default {

            #{$module}--without-images {

                &#{$module} {
                    @include responsive-spacing($properties: padding-left padding-right, $spacing-map: $i-multiple-choice-spacing-map--type-default);
                }

                #{$module}__actions {

                    @include above($i-multiple-choice-breakpoint-desktop) {
                        text-align: left;
                    }
                }
            }

            #{$module}--with-images {

                @include above($i-multiple-choice-breakpoint-desktop) {
                    margin: $i-multiple-choice-margin;
                }

                &[class*="spacing-padding-top"] {
                    padding-top: 0;
                }

                &[class*="spacing-padding-bottom"] {
                    padding-bottom: 0;
                }
            }
        }
    }
    // #endregion

    // #region [Overwrites]
    @if mixin-exists(i-multiple-choice) {
        @include i-multiple-choice;
    }
    // #endregion

}
